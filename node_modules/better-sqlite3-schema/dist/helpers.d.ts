import { Statement } from 'better-sqlite3';
import { BetterSqlite3Helper } from 'better-sqlite3-helper';
import { Cache } from './utils/cache';
export declare type DB = BetterSqlite3Helper.DBInstance;
export declare type DBInstance = DB;
export declare function delDBFile(file: string): void;
export declare type CreateDBOptions = {
    file: string;
    mode?: 'incremental' | 'overwrite';
} & Omit<BetterSqlite3Helper.DBOptions, 'path'>;
export declare function createDB(options: CreateDBOptions): BetterSqlite3Helper.DBInstance;
export declare type TableSchema = {
    table: string;
    fields?: TableFields;
    createTableSql?: string;
    createIndexSql?: string;
    autoAddField?: boolean;
    skipFields?: string[];
    refFields?: Array<string | RefFieldSchema>;
    cacheFields?: string[];
    whitelistFields?: string[] | boolean;
    idFieldSuffix?: string;
    inplaceUpdate?: boolean;
    deduplicateField?: string;
} & CacheOptions & AutoCreateOptions;
export declare type AutoCreateOptions = {
    autoCreateTable?: boolean;
    autoCreateIndex?: boolean;
};
export declare type RefFieldSchema = {
    field: string;
    idField: string;
} & CacheOptions & AutoCreateOptions;
export declare type InsertRowFn = (row: any) => number;
export declare function makeInsertRowFnFromSchema(db: DB, schema: TableSchema): InsertRowFn;
export declare type DeduplicatedTableSchema = {
    table: string;
    deduplicateField: string;
    idField: string;
} & CacheOptions;
export declare function makeDeduplicatedInsertRowFnFromSchema(db: DB, schema: DeduplicatedTableSchema, insertRowFn: InsertRowFn): InsertRowFn;
declare type MapRowFn = <T>(row: T) => T;
export declare type InsertRefSqls = {
    select: Statement;
    insert: Statement;
    idField: string;
};
export declare function makeInsertRefSqls(db: DB, schema: {
    field: string;
    idField: string;
} & AutoCreateOptions): InsertRefSqls;
export declare type Bool = 0 | 1;
export declare type TableColumn = {
    cid: number;
    name: string;
    type: string;
    notnull: Bool;
    pk: Bool;
};
export declare function getTableFields(db: DB, table: string): TableColumn[];
export declare type SqliteMasterRow = {
    type: 'table' | 'index';
    name: string;
    tbl_name: string;
    sql: string;
};
export declare function getIndices(db: DB, table: string): SqliteMasterRow[];
export declare function getTables(db: DB): SqliteMasterRow[];
export declare function removeIndices(db: DB, table: string): void;
export declare function removeAllIndices(db: DB): void;
export declare type TableInfo = {
    table: string;
    fields: TableFields;
};
export declare type TableFields = Record<string, string>;
export declare function makeTableInfo(db: DB, table: string): TableInfo;
export declare function addField(db: DB, table: TableInfo, field: string, type: string): void;
export declare function makeAutoAddFieldMapRowFn(db: DB, table: TableInfo): MapRowFn;
export declare function toSqliteDataType(fieldData: any): string;
export declare function isInt(number: any): boolean;
export declare function makeSchemaScanner(): {
    fields: Record<string, string>;
    addRowFn: (row: any) => void;
};
export declare type Id = string | number;
export declare type IdFields = Record<string, Id>;
export declare type CacheOptions = {
    cache?: Cache<number>;
    cacheSize?: number;
};
/**
 * @remark the rows will be updated in-place
 * */
export declare function insertArrayField(rows: any[] | undefined, idFields: IdFields, insertRowFn: InsertRowFn): void;
export declare function forEach(rows: any[] | undefined, fn: (row: any) => void): void;
export declare type SelectRowFn = (offset: number) => any;
export declare function makeSelectRowFnFromSchema(db: DB, schema: TableSchema): SelectRowFn;
export declare function makeSelectRefFieldSql(db: DB, field: string, idField?: string): Statement;
export declare function makeGetRefValueFnFromSchema(db: DB, schema: {
    field: string;
    idField?: string;
} & CacheOptions): (fieldId: Id) => any;
export declare function countRows(db: DB, table: string): number;
export declare function makeSelectRefFieldArray(db: DB, schema: CacheOptions & {
    field: string;
    table: string;
    idField: string;
} & ({
    joinField: string;
} | {
    idFieldSuffix?: string;
})): (fieldId: string) => any[];
export declare function makeSelectJoin(db: DB, schema: {
    field: string;
    fromTable: string;
    joinTable: string;
    joinField: string;
    idField: string;
} & CacheOptions): {
    sql: Statement;
    all: (fieldId: string) => any[];
    get: (fieldId: string) => any;
};
export declare function iterateRows<T>(select: (offset: number) => T, count: number): Generator<T, void, unknown>;
export {};
