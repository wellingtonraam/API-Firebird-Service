import { DB, InsertRowFn, SelectRowFn, TableSchema } from 'better-sqlite3-schema';
import { Sink, Source } from './pipe';
export declare type SqliteSinkOptions = {
    insertRowFn: InsertRowFn;
    close?: () => void;
};
export declare function makeSqliteSinkOptions(db: DB, schema: TableSchema, options?: {
    autoClose?: boolean;
}): SqliteSinkOptions;
export declare class SqliteObjectSink<T extends object> extends Sink<T> {
    insertRowFn: InsertRowFn;
    constructor(options: SqliteSinkOptions);
    close(): void;
    write(data: any): void;
    static create<T extends object>(options: {
        file: string;
        schema: TableSchema;
        mode?: 'incremental' | 'overwrite';
    }): SqliteObjectSink<T>;
}
export declare class SqliteValueSink extends SqliteObjectSink<any> {
    write(data: any): void;
}
export declare type SqliteSourceOptions = {
    selectRowFn: SelectRowFn;
    countRowsFn: () => number;
    close?: () => void;
};
export declare function makeSqliteSourceOptions(db: DB, schema: TableSchema, options?: {
    autoClose?: boolean;
}): SqliteSourceOptions;
export declare class SqliteObjectSource<T extends object> extends Source<T> {
    offset: number;
    selectRow: SelectRowFn;
    countRows: () => number;
    constructor(options: SqliteSourceOptions);
    read(): T;
    iterator(options?: {
        autoClose?: boolean;
    }): Generator<T>;
    close(): void;
    static create<T extends object>(options: {
        file: string;
        schema: TableSchema;
    }): SqliteObjectSource<object>;
}
export declare class SqliteValueSource extends SqliteObjectSource<any> {
    read(): any;
}
