"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawLineFileSource = exports.CheckedLineFileSink = exports.RawLineFileSink = void 0;
const tslib_1 = require("tslib");
/**
 * do not escape \n
 * */
const fs_1 = tslib_1.__importDefault(require("fs"));
const pipe_1 = require("./pipe");
const utils_1 = require("./utils");
const fs_2 = require("./utils/fs");
class RawLineFileSink extends pipe_1.Sink {
    constructor(fd) {
        super();
        this.fd = fd;
    }
    write(data) {
        const line = data + '\n';
        fs_1.default.writeSync(this.fd, line);
    }
    close() {
        fs_1.default.closeSync(this.fd);
    }
    static fromFile(file, flags = 'a') {
        fs_1.default.writeFileSync(file, '');
        const fd = fs_1.default.openSync(file, flags);
        return new RawLineFileSink(fd);
    }
}
exports.RawLineFileSink = RawLineFileSink;
class CheckedLineFileSink extends RawLineFileSink {
    write(data) {
        if (data.includes('\n')) {
            throw new Error('unsupported data with newline');
        }
        const line = data + '\n';
        fs_1.default.writeSync(this.fd, line);
    }
}
exports.CheckedLineFileSink = CheckedLineFileSink;
class RawLineFileSource extends pipe_1.Source {
    constructor(fd, options) {
        super();
        this.fd = fd;
        this.options = options;
    }
    read() {
        if (!this.generator) {
            this.generator = this.iterator({ autoClose: false });
        }
        const res = this.generator.next();
        if (res.done) {
            throw new Error(utils_1.Errors.End);
        }
        return res.value;
    }
    *iterator(options) {
        for (const line of fs_2.iterateFdByLine(this.fd, this.options)) {
            yield line;
        }
        if (options === null || options === void 0 ? void 0 : options.autoClose) {
            this.close();
        }
    }
    close() {
        fs_1.default.closeSync(this.fd);
    }
    static fromFile(file, flags = 'r', options) {
        const fd = fs_1.default.openSync(file, flags);
        return new RawLineFileSource(fd, options);
    }
}
exports.RawLineFileSource = RawLineFileSource;
//# sourceMappingURL=raw-line-file.js.map