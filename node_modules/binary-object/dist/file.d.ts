/// <reference types="node" />
import { BinarySink, BinarySource } from './binary';
export declare class FileSink implements BinarySink {
    fd: number;
    constructor(fd: number);
    write(byte: number): void;
    writeBatch(bytes: number[]): void;
    writeBuffer(buffer: Buffer, offset: number, byteLength: number): void;
    writeString(string: string, encoding: BufferEncoding): void;
    close(): void;
    static fromFile(file: string, flags?: string): FileSink;
}
export declare class FileSource implements BinarySource {
    fd: number;
    position: number;
    constructor(fd: number);
    read(): number;
    /**
     * may be pooled and shared
     * */
    readBatch(byteLength: number): Buffer;
    /**
     * must be offset 0 and with enough length
     *
     * will not auto resize
     * */
    readBuffer(byteLength: number, buffer: Buffer): void;
    readString(byteLength: number, encoding: BufferEncoding): string;
    close(): void;
    static fromFile(file: string, flags?: string): FileSource;
}
