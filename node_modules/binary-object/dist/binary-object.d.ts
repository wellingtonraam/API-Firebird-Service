/// <reference types="node" />
import { BinarySink, BinarySource } from './binary';
import { Sink, Source } from './pipe';
export declare let Types: {
    Undefined: number;
    Null: number;
    True: number;
    False: number;
    BigInt64BE: number;
    BigUInt64BE: number;
    Zero: number;
    Negative: number;
    NaN: number;
    Infinity: number;
    Byte: number;
    UInt16BE: number;
    UInt32BE: number;
    UInt64BE: number;
    FloatBE: number;
    DoubleBE: number;
    Fraction: number;
    BinaryString: number;
    Utf8Function: number;
    Utf8Symbol: number;
    DateUInt64BE: number;
    Map: number;
    Set: number;
    Buffer: number;
    Array: number;
    Object: number;
    End: number;
};
export declare function encodeNumber(sink: BinarySink, data: number): void;
export declare function encodeBuffer(sink: BinarySink, data: Buffer): void;
export declare function encodeUtf8String(sink: BinarySink, data: string): void;
/**
 * support full set of javascript objects
 * including Buffer, Map, Set and Date
 *
 * but it is much slower than BinaryJsonSink, which only support JSON values
 * */
export declare class BinaryObjectSink extends Sink<any> {
    sink: BinarySink;
    constructor(sink: BinarySink);
    write(data: any): void;
    close(): void;
}
export declare function decodeNumber(source: BinarySource): number;
export declare function decodeNumberOrEnd(source: BinarySource): any;
export declare function decodeBuffer(source: BinarySource): Buffer;
export declare function decodeUtf8String(source: BinarySource): string;
/**
 * support full set of javascript objects
 * including Buffer, Map, Set and Date
 *
 * but it is much slower than BinaryJsonSource, which only support JSON values
 * */
export declare class BinaryObjectSource extends Source<any> {
    source: BinarySource;
    constructor(source: BinarySource);
    read(): any;
    close(): void;
    iterator(options?: {
        autoClose?: boolean;
    }): Generator<any, void, unknown>;
}
