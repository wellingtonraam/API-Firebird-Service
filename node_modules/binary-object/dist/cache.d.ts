/**
 * a simplified (and pluggable) version of unique-value
 * */
import { Sink, Source } from './pipe';
export declare class CacheSink<T = any> extends Sink<T> {
    sink: Sink<string>;
    shouldCache: (value: T) => boolean;
    encode: (value: T) => string;
    values: Map<T, number>;
    constructor(sink: Sink<string>, options: {
        shouldCache: (value: T) => boolean;
        encode?: (value: T) => string;
    });
    write(data: any): void;
    close(): void;
}
export declare class CacheSource<T = any> extends Source<T> {
    source: Source<string>;
    decode: (string: string) => T;
    values: T[];
    constructor(source: Source<string>, options?: {
        decode?: (string: string) => T;
    });
    close(): void;
    read(): T;
    iterator(options?: {
        autoClose?: boolean;
    }): Generator<T>;
}
