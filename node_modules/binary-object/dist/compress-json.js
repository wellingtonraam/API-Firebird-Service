"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompressJsonSource = exports.CompressJsonSink = void 0;
const compress_json_1 = require("compress-json");
const number_1 = require("compress-json/dist/number");
const pipe_1 = require("./pipe");
const utils_1 = require("./utils");
function encode(sink, data) {
    if (data === null) {
        sink.write('');
        return;
    }
    const [values, key] = compress_json_1.compress(data);
    sink.write(key);
    for (const value of values) {
        if (value === null) {
            sink.write('');
        }
        else {
            sink.write(value);
        }
    }
}
class CompressJsonSink extends pipe_1.Sink {
    constructor(sink) {
        super();
        this.sink = sink;
    }
    write(data) {
        encode(this.sink, data);
    }
    close() {
        this.sink.close();
    }
}
exports.CompressJsonSink = CompressJsonSink;
function decode(source, key) {
    if (key === '') {
        return null;
    }
    const n = number_1.s_to_int(key) + 1;
    console.log({ n, key });
    const values = new Array(n);
    for (let i = 0; i < n; i++) {
        const value = source.read();
        values[i] = value;
    }
    return compress_json_1.decompress([values, key]);
}
class CompressJsonSource extends pipe_1.Source {
    constructor(source) {
        super();
        this.source = source;
    }
    read() {
        return decode(this.source, this.source.read());
    }
    *iterator(options) {
        for (;;) {
            try {
                yield this.read();
            }
            catch (e) {
                if (e.toString() === utils_1.Errors.End) {
                    return;
                }
                throw e;
            }
        }
    }
    close() {
        this.source.close();
    }
}
exports.CompressJsonSource = CompressJsonSource;
//# sourceMappingURL=compress-json.js.map