"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryJsonSource = exports.BinaryJsonSink = void 0;
const binary_object_1 = require("./binary-object");
const pipe_1 = require("./pipe");
const utils_1 = require("./utils");
/**
 * only support JSON values
 * e.g. don't support Buffer, Map, Set and Date
 *
 * This is much faster than BinaryObjectSink, but that support full set of javascript objects
 * */
class BinaryJsonSink extends pipe_1.Sink {
    constructor(sink) {
        super();
        this.sink = sink;
    }
    write(data) {
        if (data === undefined) {
            data = null;
        }
        const buffer = Buffer.from(JSON.stringify(data), 'utf8');
        const byteLength = buffer.byteLength;
        binary_object_1.encodeNumber(this.sink, byteLength);
        this.sink.writeBuffer(buffer, 0, byteLength);
    }
    close() {
        binary_object_1.encodeNumber(this.sink, 0);
        this.sink.close();
    }
}
exports.BinaryJsonSink = BinaryJsonSink;
/**
 * only support JSON values
 * e.g. don't support Buffer, Map, Set and Date
 *
 * This is much faster than BinaryObjectSource, but that support full set of javascript objects
 * */
class BinaryJsonSource extends pipe_1.Source {
    constructor(source) {
        super();
        this.source = source;
    }
    read() {
        const byteLength = binary_object_1.decodeNumber(this.source);
        if (byteLength === 0) {
            return utils_1.End;
        }
        return JSON.parse(this.source.readString(byteLength, 'utf8'));
    }
    close() {
        this.source.close();
    }
    *iterator(options) {
        for (;;) {
            const byteLength = binary_object_1.decodeNumber(this.source);
            if (byteLength === 0) {
                if (options === null || options === void 0 ? void 0 : options.autoClose) {
                    this.close();
                }
                return;
            }
            yield JSON.parse(this.source.readString(byteLength, 'utf8'));
        }
    }
}
exports.BinaryJsonSource = BinaryJsonSource;
//# sourceMappingURL=binary-json.js.map