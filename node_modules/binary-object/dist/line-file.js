"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LineFileSource = exports.LineFileSink = void 0;
const tslib_1 = require("tslib");
/**
 * auto escape \n
 * */
const fs_1 = tslib_1.__importDefault(require("fs"));
const pipe_1 = require("./pipe");
const utils_1 = require("./utils");
const fs_2 = require("./utils/fs");
function encode(data) {
    const json = JSON.stringify(data);
    const line = json.substring(1, json.length - 1);
    return line;
}
function decode(line) {
    const json = `"${line}"`;
    const data = JSON.parse(json);
    return data;
}
/** @deprecated in favour of raw-line-file.ts for less overhead */
class LineFileSink extends pipe_1.Sink {
    constructor(fd) {
        super();
        this.fd = fd;
    }
    write(data) {
        const line = encode(data) + '\n';
        fs_1.default.writeSync(this.fd, line);
    }
    close() {
        fs_1.default.closeSync(this.fd);
    }
    static fromFile(file, flags = 'a') {
        fs_1.default.writeFileSync(file, '');
        const fd = fs_1.default.openSync(file, flags);
        return new LineFileSink(fd);
    }
}
exports.LineFileSink = LineFileSink;
class LineFileSource extends pipe_1.Source {
    constructor(fd, options) {
        super();
        this.fd = fd;
        this.options = options;
    }
    read() {
        if (!this.generator) {
            this.generator = this.iterator({ autoClose: false });
        }
        const res = this.generator.next();
        if (res.done) {
            throw new Error(utils_1.Errors.End);
        }
        return res.value;
    }
    *iterator(options) {
        for (const line of fs_2.iterateFdByLine(this.fd, this.options)) {
            const data = decode(line);
            yield data;
        }
        if (options === null || options === void 0 ? void 0 : options.autoClose) {
            this.close();
        }
    }
    close() {
        fs_1.default.closeSync(this.fd);
    }
    static fromFile(file, flags = 'r', options) {
        const fd = fs_1.default.openSync(file, flags);
        return new LineFileSource(fd, options);
    }
}
exports.LineFileSource = LineFileSource;
//# sourceMappingURL=line-file.js.map