"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetSink = void 0;
class NetSink {
    constructor(sink) {
        this.sink = sink;
        this.p = Promise.resolve();
    }
    // TODO pool the buffer
    write(byte) {
        this.writeBatch([byte]);
    }
    // TODO pool the buffer
    writeBatch(bytes) {
        this.writeBuffer(Buffer.from(bytes), 0, bytes.length);
    }
    // TODO pool the buffer
    writeString(string, encoding) {
        const buffer = Buffer.from(string, encoding);
        this.writeBuffer(buffer, 0, buffer.byteLength);
    }
    writeBuffer(buffer, offset, byteLength) {
        this.p = this.p.then(() => new Promise((resolve, reject) => {
            this.sink.write(buffer, err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        }));
    }
    close() {
        this.sink.end();
    }
}
exports.NetSink = NetSink;
// TODO work out async version of source
/*
export class NetSource {
  constructor(public source: Socket) {}

  close(): void {
    this.source.end()
  }

  read(cb: (buffer: Buffer) => void): number {
    this.source.on('data', data => {
      data.slice()
    })
    this.source.read(1)
    return 0
  }

  readBatch(byteLength: number): Buffer {
    return undefined
  }

  readBuffer(byteLength: number, buffer: Buffer): void {}

  readString(byteLength: number, encoding: BufferEncoding): string {
    return ''
  }
}
*/
//# sourceMappingURL=net.js.map